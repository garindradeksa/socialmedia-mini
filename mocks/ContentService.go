// Code generated by mockery v2.36.1. DO NOT EDIT.

package mocks

import (
	content "github.com/garindradeksa/socialmedia-mini/features/content"
	mock "github.com/stretchr/testify/mock"

	multipart "mime/multipart"
)

// ContentService is an autogenerated mock type for the ContentService type
type ContentService struct {
	mock.Mock
}

// Add provides a mock function with given fields: formHeader, token, newContent
func (_m *ContentService) Add(formHeader multipart.FileHeader, token interface{}, newContent content.Core) (content.Core, error) {
	ret := _m.Called(formHeader, token, newContent)

	var r0 content.Core
	var r1 error
	if rf, ok := ret.Get(0).(func(multipart.FileHeader, interface{}, content.Core) (content.Core, error)); ok {
		return rf(formHeader, token, newContent)
	}
	if rf, ok := ret.Get(0).(func(multipart.FileHeader, interface{}, content.Core) content.Core); ok {
		r0 = rf(formHeader, token, newContent)
	} else {
		r0 = ret.Get(0).(content.Core)
	}

	if rf, ok := ret.Get(1).(func(multipart.FileHeader, interface{}, content.Core) error); ok {
		r1 = rf(formHeader, token, newContent)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ContentDetail provides a mock function with given fields: contentID
func (_m *ContentService) ContentDetail(contentID uint) (interface{}, error) {
	ret := _m.Called(contentID)

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (interface{}, error)); ok {
		return rf(contentID)
	}
	if rf, ok := ret.Get(0).(func(uint) interface{}); ok {
		r0 = rf(contentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(contentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ContentList provides a mock function with given fields:
func (_m *ContentService) ContentList() ([]content.Core, error) {
	ret := _m.Called()

	var r0 []content.Core
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]content.Core, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []content.Core); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]content.Core)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: token, contentID
func (_m *ContentService) Delete(token interface{}, contentID uint) error {
	ret := _m.Called(token, contentID)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, uint) error); ok {
		r0 = rf(token, contentID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetProfile provides a mock function with given fields: username
func (_m *ContentService) GetProfile(username string) (interface{}, error) {
	ret := _m.Called(username)

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (interface{}, error)); ok {
		return rf(username)
	}
	if rf, ok := ret.Get(0).(func(string) interface{}); ok {
		r0 = rf(username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: token, contentID, updatedContent
func (_m *ContentService) Update(token interface{}, contentID uint, updatedContent content.Core) (content.Core, error) {
	ret := _m.Called(token, contentID, updatedContent)

	var r0 content.Core
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}, uint, content.Core) (content.Core, error)); ok {
		return rf(token, contentID, updatedContent)
	}
	if rf, ok := ret.Get(0).(func(interface{}, uint, content.Core) content.Core); ok {
		r0 = rf(token, contentID, updatedContent)
	} else {
		r0 = ret.Get(0).(content.Core)
	}

	if rf, ok := ret.Get(1).(func(interface{}, uint, content.Core) error); ok {
		r1 = rf(token, contentID, updatedContent)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewContentService creates a new instance of ContentService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewContentService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ContentService {
	mock := &ContentService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
