// Code generated by mockery v2.36.1. DO NOT EDIT.

package mocks

import (
	helper "github.com/garindradeksa/socialmedia-mini/helper"
	mock "github.com/stretchr/testify/mock"
)

// mediaUpload is an autogenerated mock type for the mediaUpload type
type mediaUpload struct {
	mock.Mock
}

// AvatarUpload provides a mock function with given fields: avatar
func (_m *mediaUpload) AvatarUpload(avatar helper.Avatar) (string, error) {
	ret := _m.Called(avatar)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(helper.Avatar) (string, error)); ok {
		return rf(avatar)
	}
	if rf, ok := ret.Get(0).(func(helper.Avatar) string); ok {
		r0 = rf(avatar)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(helper.Avatar) error); ok {
		r1 = rf(avatar)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BannerUpload provides a mock function with given fields: banner
func (_m *mediaUpload) BannerUpload(banner helper.Banner) (string, error) {
	ret := _m.Called(banner)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(helper.Banner) (string, error)); ok {
		return rf(banner)
	}
	if rf, ok := ret.Get(0).(func(helper.Banner) string); ok {
		r0 = rf(banner)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(helper.Banner) error); ok {
		r1 = rf(banner)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ContentUpload provides a mock function with given fields: content
func (_m *mediaUpload) ContentUpload(content helper.Content) (string, error) {
	ret := _m.Called(content)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(helper.Content) (string, error)); ok {
		return rf(content)
	}
	if rf, ok := ret.Get(0).(func(helper.Content) string); ok {
		r0 = rf(content)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(helper.Content) error); ok {
		r1 = rf(content)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoteUpload provides a mock function with given fields: url
func (_m *mediaUpload) RemoteUpload(url helper.Url) (string, error) {
	ret := _m.Called(url)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(helper.Url) (string, error)); ok {
		return rf(url)
	}
	if rf, ok := ret.Get(0).(func(helper.Url) string); ok {
		r0 = rf(url)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(helper.Url) error); ok {
		r1 = rf(url)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// newMediaUpload creates a new instance of mediaUpload. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMediaUpload(t interface {
	mock.TestingT
	Cleanup(func())
}) *mediaUpload {
	mock := &mediaUpload{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
